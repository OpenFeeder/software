function OF_config_gui

% Author: Jerome Briot - https://github.com/JeromeBriot

addpath(fullfile(pwd, 'minIni'))

debug = false;

servoClosePosition = 600;
servoOpenPosition = 2400;

fig = figure(1);
clf

figSize = [800 600];

set(fig, ...
    'units', 'pixels', ...
    'position', [0 0 figSize], ...
    'resize', 'off', ...
    'menubar', 'none', ...
    'numbertitle', 'off', ...
    'name', 'OpenFeeder - Configuration parameters - INI file', ...
    'visible', 'off');

if debug
    set(fig, 'name', '/!\ DEBUG /!\ OpenFeeder - Configuration parameters - INI file /!\ DEBUG /!\')
end

% movegui(fig, 'center')

set(fig, 'visible', 'on');

uiSketchfactor = figSize(1)/240; % 240/180 mm => 800x600 px

uiSiteGroupPos       =   [5 170 50 5 2 5];
uiWakeUpGroupPos     =   [5 155 50 5 2 5];
uiSleepGroupPos      =   [5 140 50 5 2 5];
uiLogGroupPos        =   [5 125 50 5 2 5];
uiPitTagGroupPos     =   [5 110 90 5 2 105];
uiLedsGroupPos       =   [45 170 50 5 2 5];
uiDoorDelaysGroupPos =   [95 170 50 5 2 5];
uiServoGroupPos      =   [95 118 50 5 2 5];
uiTimeoutsGroupPos   =   [95 97 48 5 2 5];
uiDoorHabitGroupPos  =   [95 70 50 5 2 5];
uiPunishmentGroupPos =   [95 58 50 5 2 5];
uiScenarioGroupPos   =   [95 47 50 5 2 5];
uiLogoGroupPos       =   [97 3 48 48*189/250];
uiButtonGroupPos     =   [145+5*ismac 170 50 5 2 5];
uiPreviewGroupPos    =   [145+5*ismac 153 50 5 2 148];
% uiDebugGroupPos      =   [95 60 50 5 2 5];

%% Site ID
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', uiSiteGroupPos(1:4)*uiSketchfactor, ...
    'string', 'Site ID', ...
    'horizontalalignment', 'left', ...
    'fontweight', 'bold');
xPos = uiSiteGroupPos(1)+uiSiteGroupPos(5);
yPos = uiSiteGroupPos(2)-uiSiteGroupPos(6);
uicontrol(fig, ...
    'style', 'popup', ...
    'units', 'pixels', ...
    'position', [xPos yPos 15+5*ismac 5]*uiSketchfactor, ...
    'tag', 'uiSiteName', ...
    'fontweight', 'bold');
xPos = xPos+15+5*ismac;
uicontrol(fig, ...
    'style', 'popup', ...
    'units', 'pixels', ...
    'position', [xPos yPos 15+5*ismac 5]*uiSketchfactor, ...
    'tag', 'uiSiteNum', ...
    'string', cellstr(num2str((1:20).', '%02d')),...
    'fontweight', 'bold');

%% Wake up time
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', uiWakeUpGroupPos(1:4)*uiSketchfactor, ...
    'string', 'Wake up time', ...
    'horizontalalignment', 'left', ...
    'fontweight', 'bold');
xPos = uiWakeUpGroupPos(1)+uiWakeUpGroupPos(5);
yPos = uiWakeUpGroupPos(2)-uiWakeUpGroupPos(6);
uicontrol(fig, ...
    'style', 'popupmenu', ...
    'units', 'pixels', ...
    'position', [xPos yPos 12+8*ismac 5]*uiSketchfactor, ...
    'tag', 'uiWakeUpTimeHour', ...
    'string',  cellstr(num2str((0:23).', '%02d')), ...
    'fontweight', 'bold', ...
    'value', 7);
xPos = xPos+12+8*ismac;
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 5 5]*uiSketchfactor, ...
    'string', ':');
xPos = xPos+5;
uicontrol(fig, ...
    'style', 'popupmenu', ...
    'units', 'pixels', ...
    'position', [xPos yPos 12+8*ismac 5]*uiSketchfactor, ...
    'tag', 'uiWakeUpTimeMinute', ...
    'string', cellstr(num2str((0:5:55).', '%02d')), ...
    'fontweight', 'bold');
xPos = xPos+10;
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 5 5]*uiSketchfactor, ...
    'string', ':', ...
    'visible', 'off');
xPos = xPos+5;
uicontrol(fig, ...
    'style', 'edit', ...
    'units', 'pixels', ...
    'position', [xPos yPos 10 5]*uiSketchfactor, ...
    'tag', 'uiWakeUpTimeSecond', ...
    'string', '00', ...
    'fontweight', 'bold', ...
    'visible', 'off');

%% Sleep time
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', uiSleepGroupPos(1:4)*uiSketchfactor, ...
    'string', 'Sleep time', ...
    'horizontalalignment', 'left', ...
    'fontweight', 'bold');
xPos = uiSleepGroupPos(1)+uiSleepGroupPos(5);
yPos = uiSleepGroupPos(2)-uiSleepGroupPos(6);
uicontrol(fig, ...
    'style', 'popupmenu', ...
    'units', 'pixels', ...
    'position', [xPos yPos 12+8*ismac 5]*uiSketchfactor, ...
    'tag', 'uiSleepTimeHour', ...
    'string',  cellstr(num2str((0:23).', '%02d')), ...
    'fontweight', 'bold', ...
    'value', 24);
xPos = xPos+12+8*ismac;
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 5 5]*uiSketchfactor, ...
    'string', ':');
xPos = xPos+5;
uicontrol(fig, ...
    'style', 'popupmenu', ...
    'units', 'pixels', ...
    'position', [xPos yPos 12+8*ismac 5]*uiSketchfactor, ...
    'tag', 'uiSleepTimeMinute', ...
    'string', cellstr(num2str((0:5:55).', '%02d')), ...
    'fontweight', 'bold');
xPos = xPos+12;
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 5 5]*uiSketchfactor, ...
    'string', ':', ...
    'visible', 'off');
xPos = xPos+5;
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 10 5]*uiSketchfactor, ...
    'tag', 'uiSleepTimeSecond', ...
    'string', '00', ...
    'fontweight', 'bold', ...
    'visible', 'off');

%% Log File
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', uiLogGroupPos(1:4)*uiSketchfactor, ...
    'string', 'Log file', ...
    'horizontalalignment', 'left', ...
    'fontweight', 'bold');

xPos = uiLogGroupPos(1)+uiLogGroupPos(5);
yPos = uiLogGroupPos(2)-uiLogGroupPos(6);

uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 25 5]*uiSketchfactor, ...
    'string', 'Data separator', ...
    'hor', 'left');
xPos = xPos+25;

uicontrol(fig, ...
    'style', 'popup', ...
    'units', 'pixels', ...
    'position', [xPos yPos 10 5]*uiSketchfactor, ...
    'tag', 'uiLogFileSeparator', ...
    'string', {',' ; ';'},...
    'fontweight', 'bold');

%% Pit Tags
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', uiPitTagGroupPos(1:4)*uiSketchfactor, ...
    'string', 'PIT tags available', ...
    'horizontalalignment', 'left', ...
    'fontweight', 'bold');
xPos = uiPitTagGroupPos(1)+uiPitTagGroupPos(5);
yPos = uiPitTagGroupPos(2)-uiPitTagGroupPos(6);
uicontrol(fig, ...
    'style', 'list', ...
    'units', 'pixels', ...
    'position', [xPos yPos (uiPitTagGroupPos(3)-25)/2 uiPitTagGroupPos(6)]*uiSketchfactor, ...
    'tag', 'uiAvailablePitTags', ...
    'string', '',...
    'max', 2,...
    'fontweight', 'bold', ...
    'fontname', 'monospaced');
xPos = xPos+(uiPitTagGroupPos(3)-25)/2+5;
yPos = uiPitTagGroupPos(2)-20;
uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [xPos yPos 10 5]*uiSketchfactor, ...
    'tag', 'uiPitTagsButtonToRight', ...
    'string', '>', ...
    'enable', 'off', ...
    'callback', @setDeniedTag, ...
    'fontweight', 'bold');
yPos = yPos-7;
uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [xPos yPos 10 5]*uiSketchfactor, ...
    'tag', 'uiPitTagsButtonToLeft', ...
    'string', '<', ...
    'enable', 'off', ...
    'callback', @setDeniedTag, ...
    'fontweight', 'bold');
yPos = yPos-7;
uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [xPos yPos 10 5]*uiSketchfactor, ...
    'tag', 'uiPitTagsButtonClear', ...
    'string', 'X', ...
    'callback', @setDeniedTag, ...
    'fontweight', 'bold');

yPos = yPos-7;
uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [xPos yPos 10 5]*uiSketchfactor, ...
    'style', 'popup', ...
    'tag', 'uiPitTagsNumOF', ...
    'string', cellstr(num2str((0:8).')), ...
    'callback', @setNumOF, ...
    'fontweight', 'bold');

yPos = yPos-2;

for n = 1:8
    yPos = yPos-7;
    uicontrol(fig, ...
        'units', 'pixels', ...
        'position', [xPos yPos 10 5]*uiSketchfactor, ...
        'tag', 'uiPitTagsButton8', ...
        'string', sprintf('%d/8', n), ...
        'callback', @setDeniedTag, ...
        'fontweight', 'bold', ...
        'visible', 'off');
end

xPos = uiPitTagGroupPos(1)+(uiPitTagGroupPos(3)-25)/2+5+10+5;
uicontrol(fig, ...
    'style', 'radio', ...
    'units', 'pixels', ...
    'position', [xPos uiPitTagGroupPos(2) 40 5]*uiSketchfactor, ...
    'string', 'Denied / color A', ...
    'tag', 'uiRadioPitTagsDenied', ...
    'horizontalalignment', 'left', ...
    'fontweight', 'bold', ...
    'value', 1, ...
    'callback', @selectPitTagList);
xPos = uiPitTagGroupPos(1)+(uiPitTagGroupPos(3)-25)/2+5+10+5+2;
yPos = uiPitTagGroupPos(2)-uiPitTagGroupPos(6)/2+5;
uicontrol(fig, ...
    'style', 'list', ...
    'units', 'pixels', ...
    'position', [xPos yPos (uiPitTagGroupPos(3)-25)/2 uiPitTagGroupPos(6)/2-5]*uiSketchfactor, ...
    'tag', 'uiPitTagsDenied', ...
    'fontweight', 'bold', ...
    'value', 0, ...
    'max', 2,...
    'fontname', 'monospaced');

xPos = uiPitTagGroupPos(1)+(uiPitTagGroupPos(3)-25)/2+5+10+5;
yPos = uiPitTagGroupPos(2)-uiPitTagGroupPos(6)/2;
uicontrol(fig, ...
    'style', 'radio', ...
    'units', 'pixels', ...
    'position', [xPos yPos 40 5]*uiSketchfactor, ...
    'string', 'Accepted / color B', ...
    'tag', 'uiRadioPitTagsAccepted', ...
    'horizontalalignment', 'left', ...
    'fontweight', 'bold', ...
    'callback', @selectPitTagList);
xPos = uiPitTagGroupPos(1)+(uiPitTagGroupPos(3)-25)/2+5+10+5+2;
yPos = uiPitTagGroupPos(2)-uiPitTagGroupPos(6);
uicontrol(fig, ...
    'style', 'list', ...
    'units', 'pixels', ...
    'position', [xPos yPos (uiPitTagGroupPos(3)-25)/2 uiPitTagGroupPos(6)/2]*uiSketchfactor, ...
    'tag', 'uiPitTagsAccepted', ...
    'fontweight', 'bold', ...
    'value', 0, ...
    'max', 2,...
    'fontname', 'monospaced');

%% Attractive LEDs color
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', uiLedsGroupPos(1:4)*uiSketchfactor, ...
    'string', 'Attractive LEDs', ...
    'horizontalalignment', 'left', ...
    'fontweight', 'bold');
xPos = uiLedsGroupPos(1)+uiLedsGroupPos(5);
yPos = uiLedsGroupPos(2)-uiLedsGroupPos(6);
uicontrol(fig, ...
    'style', 'pushbutton', ...
    'units', 'pixels', ...
    'position', [xPos yPos 25 5]*uiSketchfactor, ...
    'string', 'Set color A', ...
    'callback', @setAttractLEDsColor);
yPos = yPos-5;
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 25 5]*uiSketchfactor, ...
    'tag', 'uiAttractLedsValueA', ...
    'string', '[0 0 0]');
xPos = xPos+30;
uicontrol(fig, ...
    'style', 'frame', ...
    'units', 'pixels', ...
    'position', [xPos yPos 10 2*5]*uiSketchfactor, ...
    'tag', 'uiAttractLedsFrameA', ...
    'backgroundcolor', [0 0 0]);
xPos = uiLedsGroupPos(1)+uiLedsGroupPos(5);
yPos = yPos-8;
uicontrol(fig, ...
    'style', 'pushbutton', ...
    'units', 'pixels', ...
    'position', [xPos yPos 25 5]*uiSketchfactor, ...
    'string', 'Set color B', ...
    'callback', @setAttractLEDsColor);
yPos = yPos-5;
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 25 5]*uiSketchfactor, ...
    'tag', 'uiAttractLedsValueB', ...
    'string', '[0 0 0]');
xPos = xPos+30;
uicontrol(fig, ...
    'style', 'frame', ...
    'units', 'pixels', ...
    'position', [xPos yPos 10 2*5]*uiSketchfactor, ...
    'tag', 'uiAttractLedsFrameB', ...
    'backgroundcolor', [0 0 0]);
xPos = uiLedsGroupPos(1)+uiLedsGroupPos(5);
yPos = yPos-8;
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 15 5]*uiSketchfactor, ...
    'string', 'Alt. delay', ...
    'hor', 'left');
xPos = xPos+15;
uicontrol(fig, ...
    'style', 'popup', ...
    'units', 'pixels', ...
    'position', [xPos yPos 12+8*ismac 5]*uiSketchfactor, ...
    'tag', 'uiAttractLedsAltDelay', ...
    'string', strtrim(cellstr(num2str(([0:5 10:10:30 60]).'))), ...
    'fontweight', 'bold');
xPos = uiLedsGroupPos(1)+uiLedsGroupPos(5);
yPos = yPos-10;
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 10 5]*uiSketchfactor, ...
    'string', 'On', ...
    'hor', 'left');
xPos = xPos+10;
uicontrol(fig, ...
    'style', 'popupmenu', ...
    'units', 'pixels', ...
    'position', [xPos yPos 12+8*ismac 5]*uiSketchfactor, ...
    'tag', 'uiAttractLedsOnHour', ...
    'string',  cellstr(num2str((0:23).', '%02d')), ...
    'fontweight', 'bold');
xPos = xPos+12+8*ismac;
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 5 5]*uiSketchfactor, ...
    'string', ':');
xPos = xPos+5;
uicontrol(fig, ...
    'style', 'popupmenu', ...
    'units', 'pixels', ...
    'position', [xPos yPos 12+8*ismac 5]*uiSketchfactor, ...
    'tag', 'uiAttractLedsOnMinute', ...
    'string', cellstr(num2str((0:5:55).', '%02d')), ...
    'fontweight', 'bold');
xPos = xPos+12;
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 5 5]*uiSketchfactor, ...
    'string', ':', ...
    'visible', 'off');
xPos = xPos+5;
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 10 5]*uiSketchfactor, ...
    'tag', 'uiAttractLedsWakeupTimeSecond', ...
    'string', '00', ...
    'fontweight', 'bold', ...
    'visible', 'off');
xPos = uiLedsGroupPos(1)+uiLedsGroupPos(5);
yPos = yPos-8;
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 10 5]*uiSketchfactor, ...
    'string', 'Off', ...
    'hor', 'left');
xPos = xPos+10;
uicontrol(fig, ...
    'style', 'popupmenu', ...
    'units', 'pixels', ...
    'position', [xPos yPos 12+8*ismac 5]*uiSketchfactor, ...
    'tag', 'uiAttractLedsOffHour', ...
    'string',  cellstr(num2str((0:23).', '%02d')), ...
    'fontweight', 'bold');
xPos = xPos+12+8*ismac;
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 5 5]*uiSketchfactor, ...
    'string', ':');
xPos = xPos+5;
uicontrol(fig, ...
    'style', 'popupmenu', ...
    'units', 'pixels', ...
    'position', [xPos yPos 12+8*ismac 5]*uiSketchfactor, ...
    'tag', 'uiAttractLedsOffMinute', ...
    'string', cellstr(num2str((0:5:55).', '%02d')), ...
    'fontweight', 'bold');
xPos = xPos+12;
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 5 5]*uiSketchfactor, ...
    'string', ':', ...
    'visible', 'off');
xPos = xPos+5;
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 10 5]*uiSketchfactor, ...
    'tag', 'uiAttractLedsSleepTimeSecond', ...
    'string', '00', ...
    'fontweight', 'bold', ...
    'visible', 'off');

%% Door
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', uiDoorDelaysGroupPos(1:4)*uiSketchfactor, ...
    'string', 'Door', ...
    'horizontalalignment', 'left', ...
    'fontweight', 'bold');
xPos = uiDoorDelaysGroupPos(1)+uiDoorDelaysGroupPos(5);
yPos = uiDoorDelaysGroupPos(2)-uiDoorDelaysGroupPos(6);
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 10 5]*uiSketchfactor, ...
    'string', 'Open',...
    'hor', 'left');
xPos = xPos+10;
uicontrol(fig, ...
    'style', 'popupmenu', ...
    'units', 'pixels', ...
    'position', [xPos yPos 12+8*ismac 5]*uiSketchfactor, ...
    'tag', 'uiDoorOpenHour', ...
    'string',  cellstr(num2str((0:23).', '%02d')), ...
    'fontweight', 'bold');
xPos = xPos+12+8*ismac;
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 5 5]*uiSketchfactor, ...
    'string', ':');
xPos = xPos+5;
uicontrol(fig, ...
    'style', 'popupmenu', ...
    'units', 'pixels', ...
    'position', [xPos yPos 12+8*ismac 5]*uiSketchfactor, ...
    'tag', 'uiDoorOpenMinute', ...
    'string', cellstr(num2str((0:5:55).', '%02d')), ...
    'fontweight', 'bold');
xPos = xPos+12;
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 5 5]*uiSketchfactor, ...
    'string', ':', ...
    'visible', 'off');
xPos = xPos+5;
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 10 5]*uiSketchfactor, ...
    'tag', 'uiDoorOpenSecond', ...
    'string', '00', ...
    'fontweight', 'bold', ...
    'visible', 'off');
xPos = uiDoorDelaysGroupPos(1)+uiDoorDelaysGroupPos(5);
yPos = yPos-8;
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 10 5]*uiSketchfactor, ...
    'string', 'Close', ...
    'hor', 'left');
xPos = xPos+10;
uicontrol(fig, ...
    'style', 'popupmenu', ...
    'units', 'pixels', ...
    'position', [xPos yPos 12+8*ismac 5]*uiSketchfactor, ...
    'tag', 'uiDoorCloseHour', ...
    'string',  cellstr(num2str((0:23).', '%02d')), ...
    'fontweight', 'bold');
xPos = xPos+12+8*ismac;
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 5 5]*uiSketchfactor, ...
    'string', ':');
xPos = xPos+5;
uicontrol(fig, ...
    'style', 'popupmenu', ...
    'units', 'pixels', ...
    'position', [xPos yPos 12+8*ismac 5]*uiSketchfactor, ...
    'tag', 'uiDoorCloseMinute', ...
    'string', cellstr(num2str((0:5:55).', '%02d')), ...
    'fontweight', 'bold');
xPos = xPos+12;
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 5 5]*uiSketchfactor, ...
    'string', ':', ...
    'visible', 'off');
xPos = xPos+5;
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 10 5]*uiSketchfactor, ...
    'tag', 'uiDoorCloseSecond', ...
    'string', '00', ...
    'fontweight', 'bold', ...
    'visible', 'off');

xPos = uiDoorDelaysGroupPos(1)+uiDoorDelaysGroupPos(5);
yPos = yPos-8;
uicontrol(fig, ...
    'style', 'checkbox', ...
    'units', 'pixels', ...
    'position', [xPos yPos 30 5]*uiSketchfactor, ...
    'string', 'Remain open', ...
    'tag', 'uiDoorremain_open');

xPos = uiDoorDelaysGroupPos(1)+uiDoorDelaysGroupPos(5);
yPos = yPos-8;

uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 20 5]*uiSketchfactor, ...
    'string', 'Open delay', ...
    'hor', 'left');
xPos = xPos+30;
uicontrol(fig, ...
    'style', 'popup', ...
    'units', 'pixels', ...
    'position', [xPos yPos 12+8*ismac 5]*uiSketchfactor, ...
    'tag', 'uiDoorDelaysOpen', ...
    'string', strtrim(cellstr(num2str(([0:5 10:10:30 60]).'))), ...
    'fontweight', 'bold');
xPos = uiDoorDelaysGroupPos(1)+uiDoorDelaysGroupPos(5);
yPos = yPos-8;
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 20 5]*uiSketchfactor, ...
    'string', 'Close delay', ...
    'hor', 'left');
xPos = xPos+30;
uicontrol(fig, ...
    'style', 'popup', ...
    'units', 'pixels', ...
    'position', [xPos yPos 12+8*ismac 5]*uiSketchfactor, ...
    'tag', 'uiDoorDelaysClose', ...
    'string', strtrim(cellstr(num2str(([0:5 10:10:30 60]).'))), ...
    'fontweight', 'bold');

xPos = xPos-30;
yPos = yPos-8;
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 30 5]*uiSketchfactor, ...
    'string', 'Reward probability', ...
    'hor', 'left');
xPos = xPos+30;
uicontrol(fig, ...
    'style', 'popup', ...
    'units', 'pixels', ...
    'position', [xPos yPos 12+8*ismac 5]*uiSketchfactor, ...
    'tag', 'uireward_probability', ...
    'string', strtrim(cellstr(num2str((1:-0.1:0).', '%.1f'))), ...
    'fontweight', 'bold');

%% Servomotor
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', uiServoGroupPos(1:4)*uiSketchfactor, ...
    'string', 'Servomotor', ...
    'horizontalalignment', 'left', ...
    'fontweight', 'bold');
xPos = uiServoGroupPos(1)+uiServoGroupPos(5);
yPos = uiServoGroupPos(2)-uiServoGroupPos(6);
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 25 uiServoGroupPos(6)]*uiSketchfactor, ...
    'string', 'Close position', ...
    'hor', 'left');
xPos = xPos + 25;
uicontrol(fig, ...
    'style', 'edit', ...
    'units', 'pixels', ...
    'position', [xPos yPos 15 uiServoGroupPos(6)]*uiSketchfactor, ...
    'string', servoClosePosition, ...
    'tag', 'uiServoMinPos', ...
    'fontweight', 'bold');
xPos = xPos - 25;
yPos = yPos - uiServoGroupPos(6);
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 25 uiServoGroupPos(6)]*uiSketchfactor, ...
    'string', 'Open position', ...
    'hor', 'left');
xPos = xPos + 25;
uicontrol(fig, ...
    'style', 'edit', ...
    'units', 'pixels', ...
    'position', [xPos yPos 15 uiServoGroupPos(6)]*uiSketchfactor, ...
    'string', servoOpenPosition, ...
    'tag', 'uiServoMaxPos', ...
    'fontweight', 'bold');
xPos = xPos - 25;
yPos = yPos - uiServoGroupPos(6);
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 25 uiServoGroupPos(6)]*uiSketchfactor, ...
    'string', 'Speed', ...
    'hor', 'left');
xPos = xPos + 25;
uicontrol(fig, ...
    'style', 'edit', ...
    'units', 'pixels', ...
    'position', [xPos yPos 15 uiServoGroupPos(6)]*uiSketchfactor, ...
    'string', '10', ...
    'tag', 'uiServoSpeedInc', ...
    'fontweight', 'bold');

%% Timeouts
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', uiTimeoutsGroupPos(1:4)*uiSketchfactor, ...
    'string', 'Timeouts', ...
    'horizontalalignment', 'left', ...
    'fontweight', 'bold');
xPos = uiTimeoutsGroupPos(1)+uiTimeoutsGroupPos(5);
yPos = uiTimeoutsGroupPos(2)-uiTimeoutsGroupPos(6);
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 20 5]*uiSketchfactor, ...
    'string', 'Standby', ...
    'hor', 'left');
xPos = xPos+20;
uicontrol(fig, ...
    'style', 'popup', ...
    'units', 'pixels', ...
    'position', [xPos yPos 12+8*ismac 5]*uiSketchfactor, ...
    'tag', 'uiSleepTimeout', ...
    'string', strtrim(cellstr(num2str(([0:5 10:10:30 60]).'))), ...
    'fontweight', 'bold');
xPos = uiTimeoutsGroupPos(1)+uiTimeoutsGroupPos(5);
yPos = uiTimeoutsGroupPos(2)-2.5*uiTimeoutsGroupPos(6);
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 20 5]*uiSketchfactor, ...
    'string', 'PIR', ...
    'hor', 'left');
xPos = xPos+20;
uicontrol(fig, ...
    'style', 'popup', ...
    'units', 'pixels', ...
    'position', [xPos yPos 12+8*ismac 5]*uiSketchfactor, ...
    'tag', 'uiPIRTimeout', ...
    'string', strtrim(cellstr(num2str(([0:5 10:10:30 60]).'))), ...
    'fontweight', 'bold');
xPos = uiTimeoutsGroupPos(1)+uiTimeoutsGroupPos(5);
yPos = uiTimeoutsGroupPos(2)-4*uiTimeoutsGroupPos(6);
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 20 5]*uiSketchfactor, ...
    'string', 'Reward', ...
    'hor', 'left');
xPos = xPos+20;
uicontrol(fig, ...
    'style', 'popup', ...
    'units', 'pixels', ...
    'position', [xPos yPos 12+8*ismac 5]*uiSketchfactor, ...
    'tag', 'uiRewardTimeout', ...
    'string', strtrim(cellstr(num2str(([0:5 10:10:30 60]).'))), ...
    'value', 6, ...
    'fontweight', 'bold');

%% Door habituation
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', uiDoorHabitGroupPos(1:4)*uiSketchfactor, ...
    'string', 'Door habituation', ...
    'horizontalalignment', 'left', ...
    'fontweight', 'bold');
xPos = uiDoorHabitGroupPos(1)+uiDoorHabitGroupPos(5);
yPos = uiDoorHabitGroupPos(2)-uiDoorHabitGroupPos(6);
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 20 5]*uiSketchfactor, ...
    'string', 'Open %', ...
    'hor', 'left');
xPos = xPos+20;
uicontrol(fig, ...
    'style', 'popup', ...
    'units', 'pixels', ...
    'position', [xPos yPos 12+8*ismac 5]*uiSketchfactor, ...
    'tag', 'uiDoorHabitPercent', ...
    'string', strtrim(cellstr(num2str(([0 25:25:75 90 100]).'))), ...
    'fontweight', 'bold');

%% Punishment
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', uiPunishmentGroupPos(1:4)*uiSketchfactor, ...
    'string', 'Punishment', ...
    'horizontalalignment', 'left', ...
    'fontweight', 'bold');
xPos = uiPunishmentGroupPos(1)+uiPunishmentGroupPos(5);
yPos = uiPunishmentGroupPos(2)-uiPunishmentGroupPos(6);
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', [xPos yPos 20 5]*uiSketchfactor, ...
    'string', 'Delay', ...
    'hor', 'left');
xPos = xPos+20;
uicontrol(fig, ...
    'style', 'popup', ...
    'units', 'pixels', ...
    'position', [xPos yPos 12+8*ismac 5]*uiSketchfactor, ...
    'tag', 'uiPunishmentDelay', ...
    'string', strtrim(cellstr(num2str((0:5:30).'))), ...
    'fontweight', 'bold');

%% Scenario
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', uiScenarioGroupPos(1:4)*uiSketchfactor, ...
    'string', 'Scenario', ...
    'horizontalalignment', 'left', ...
    'fontweight', 'bold');
xPos = uiScenarioGroupPos(1)+uiScenarioGroupPos(5);
yPos = uiScenarioGroupPos(2)-uiScenarioGroupPos(6);
uicontrol(fig, ...
    'style', 'popup', ...
    'units', 'pixels', ...
    'position', [xPos yPos 50 5]*uiSketchfactor, ...
    'tag', 'uiScenario', ...
    'string', {'0 - none' ; '1 - OpenBar' ; '2 - LongTermSpatialMemory' ; '3 - WorkingSpatialMemory' ; '4 - ColorAssociativeLearning' ; '5 - DoorHabituation'},...    'fontweight', 'bold', ...
    'callback', @setScenario);

%% Load/Preview/Export buttons
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', uiButtonGroupPos(1:4)*uiSketchfactor, ...
    'string', 'Ini file', ...
    'horizontalalignment', 'left', ...
    'fontweight', 'bold');
xPos = uiButtonGroupPos(1)+uiButtonGroupPos(5);
yPos = uiButtonGroupPos(2)-2*uiButtonGroupPos(6);
uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [xPos yPos 25 10]*uiSketchfactor, ...
    'tag', 'uiLoadButton', ...
    'string', 'Load', ...
    'callback', @loadIniFile);
xPos = xPos + 30;
uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [xPos yPos 25 10]*uiSketchfactor, ...
    'tag', 'uiGenerateButton', ...
    'string', 'Preview', ...
    'enable', 'on', ...
    'callback', @previewIniFile);
xPos = xPos + 30;
uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [xPos yPos 25 10]*uiSketchfactor, ...
    'tag', 'uiExportButton', ...
    'string', 'Export', ...
    'enable', 'on', ...
    'callback', @exportIniFile);

%% Preview zone
uicontrol(fig, ...
    'style', 'text', ...
    'units', 'pixels', ...
    'position', uiPreviewGroupPos(1:4)*uiSketchfactor, ...
    'string', 'Preview', ...
    'horizontalalignment', 'left', ...
    'fontweight', 'bold');
xPos = uiPreviewGroupPos(1)+uiPreviewGroupPos(5)+5;
yPos = uiPreviewGroupPos(2)-uiPreviewGroupPos(6);
uicontrol(fig, ...
    'style', 'listbox', ...
    'units', 'pixels', ...
    'position', [xPos yPos 80 uiPreviewGroupPos(6)]*uiSketchfactor, ...    'string', 'Ini File', ...
    'horizontalalignment', 'left', ...
    'fontweight', 'bold', ...
    'tag', 'uiPreview');

%% Logo
ax = axes('units','pixels', 'position', uiLogoGroupPos*uiSketchfactor, ...
    'tag', 'logoAxes');
[img, ~, transparency] = imread('logo_openfeeder.png', 'png');
image( img,'parent', ax, 'alphadata', transparency);
axis(ax, 'image', 'off')

% xPos = uiLogoGroupPos(1);
% yPos = uiLogoGroupPos(2)-10;
% uicontrol(fig, ...
%     'style', 'text', ...
%     'units', 'pixels', ...
%     'position', [xPos yPos uiLogoGroupPos(3) 10]*uiSketchfactor, ...
%     'string', {'OpenFeeder Team' 'contact.openfeeder@gmail.com'}, ...
%     'horizontalalignment', 'center');

handles.debug = debug;

handles = guihandles(fig);
guidata(fig, handles);

%% Load sites list
if exist('sites.txt', 'file')==2
    fid = fopen('sites.txt', 'r');
    sites = textscan(fid, '%s%*s%*s', 'delimiter', ',');
    fclose(fid);
else
    sites{1} = '';
end

set(handles.uiSiteName, 'string', sites{1});

%% Load PIT tags list
if exist('pittags.txt', 'file')==2
    fid = fopen('pittags.txt', 'r');
    pittags = textscan(fid, '%s', 'delimiter', '\n');
    fclose(fid);
else
    pittags{1} = '';
end
if debug && exist('pittags_debug.txt', 'file')==2
    fid = fopen('pittags_debug.txt', 'r');
    pittags_debug = textscan(fid, '%s', 'delimiter', '\n');
    fclose(fid);
    pittags{1} = [pittags{1} ; pittags_debug{1}];
end

if numel(pittags{1})>0
    pittags{1} = upper(pittags{1});
    pittags{1} = unique(pittags{1});
    set(handles.uiAvailablePitTags, 'string', pittags{1});
    set(handles.uiPitTagsButtonToRight, 'enable', 'on');
end

function setScenario(obj, ~)

handles = guidata(gcbf);

val = get(obj, 'value')-1;

switch val
    
    case 0
        setAttractLEDsOff;
        set([handles.uiPitTagsDenied handles.uiPitTagsAccepted], 'string', '', 'value', 1);
        set(handles.uiPitTagsNumOF, 'value', 1)
        setNumOF(handles.uiPitTagsNumOF)
        set(handles.uiAttractLedsAltDelay, 'value', 1)
        set(handles.uiDoorremain_open, 'value', 0)
        set(handles.uiPunishmentDelay, 'value', 1)
        set(handles.uiRewardTimeout, 'value', 1)
        
    case 1
        set(handles.uiDoorremain_open, 'value', 1)
        set([handles.uiDoorDelaysOpen handles.uiDoorDelaysClose handles.uiSleepTimeout handles.uiRewardTimeout], 'value', 1)
        set(handles.uiPitTagsNumOF, 'value', 1)
        setNumOF(handles.uiPitTagsNumOF)
        set([handles.uiPitTagsDenied handles.uiPitTagsAccepted], 'string', '', 'value', 1);
        set([handles.uiRadioPitTagsAccepted handles.uiRadioPitTagsDenied], 'value', 0)
        set(handles.uiAttractLedsAltDelay, 'value', 1)
        setAttractLEDsOff;
        set(handles.uiPunishmentDelay, 'value', 1)
%         set(handles.uiRewardTimeout, 'value', 6)
        
    case 2
        set(handles.uiDoorremain_open, 'value', 0)
        set(handles.uiPitTagsNumOF, 'value', 9)
        setNumOF(handles.uiPitTagsNumOF)
        set([handles.uiPitTagsDenied handles.uiPitTagsAccepted], 'string', '', 'value', 1);
        set(handles.uiRadioPitTagsAccepted, 'value', 1)
        set(handles.uiRadioPitTagsDenied, 'value', 0)
        setAttractLEDsOff;
        set(handles.uiAttractLedsAltDelay, 'value', 1)
        set(handles.uiPunishmentDelay, 'value', 1)
        set(handles.uiRewardTimeout, 'value', 6)
        
    case 3
        set(handles.uiDoorremain_open, 'value', 0)
        set(handles.uiPitTagsNumOF, 'value', 1)
        setNumOF(handles.uiPitTagsNumOF)
        set(handles.uiPitTagsDenied, 'string', '', 'value', 1);
        set(handles.uiPitTagsAccepted, 'string', get(handles.uiAvailablePitTags, 'string'), 'value', 1)
        set(handles.uiRadioPitTagsAccepted, 'value', 1)
        set(handles.uiRadioPitTagsDenied, 'value', 0)
        setAttractLEDsOff;
        set(handles.uiAttractLedsAltDelay, 'value', 1)
        set(handles.uiPunishmentDelay, 'value', 1)
        set(handles.uiRewardTimeout, 'value', 6)
        
    case 4
        str{1} = get(handles.uiAvailablePitTags, 'string');
        str{1} = cellstr(str{1});
        
        N = 2;
        
        nPitTags = round(numel(str{1})/N);
        
        n = 1;
        str{2} = str{1}((n-1)*nPitTags+1:nPitTags*n);
        set(handles.uiPitTagsDenied, 'string', str{2}, 'value', 1);
        
        n = 2;
        str{2} = str{1}((n-1)*nPitTags+1:end);
        set(handles.uiPitTagsAccepted, 'string', str{2}, 'value', 1)
        
        set([handles.uiRadioPitTagsAccepted handles.uiRadioPitTagsDenied], 'value', 0)
        
        rgb = [0 155 0];
        set(handles.uiAttractLedsValueA, 'string', sprintf('[%d %d %d]', rgb));
        if ~any(rgb==-1)
            set(handles.uiAttractLedsFrameA, 'backgroundcolor', double(rgb)/255)
        end
        rgb = [155 0 0];
        set(handles.uiAttractLedsValueB, 'string', sprintf('[%d %d %d]', rgb));
        if ~any(rgb==-1)
            set(handles.uiAttractLedsFrameB, 'backgroundcolor', double(rgb)/255)
        end
        
        set(handles.uiAttractLedsAltDelay, 'value', 2)
        set(handles.uiSleepTimeout, 'value', 1)
        set(handles.uiDoorremain_open, 'value', 0)
        
%         if get(handles.uiPunishmentDelay, 'value')==1
            set(handles.uiPunishmentDelay, 'value', 2)
%         end
        
        set(handles.uiRewardTimeout, 'value', 6)
        
    case 5
        set(handles.uiDoorremain_open, 'value', 0)
        set([handles.uiDoorDelaysOpen handles.uiDoorDelaysClose handles.uiSleepTimeout], 'value', 1)
        set(handles.uiRewardTimeout, 'value', 6)
        set(handles.uiPitTagsNumOF, 'value', 1)
        setNumOF(handles.uiPitTagsNumOF)
        set([handles.uiPitTagsDenied handles.uiPitTagsAccepted], 'string', '', 'value', 1);
        set([handles.uiRadioPitTagsAccepted handles.uiRadioPitTagsDenied], 'value', 0)
        set(handles.uiAttractLedsAltDelay, 'value', 1)
        setAttractLEDsOff;
        set(handles.uiPunishmentDelay, 'value', 1)
%         set(handles.uiRewardTimeout, 'value', 6)
end

guidata(gcbf, handles);

previewIniFile

function selectPitTagList(obj, ~)

handles = guidata(gcbf);

t = get(obj, 'tag');

if strcmp(t, 'uiRadioPitTagsAccepted')
    set(handles.uiRadioPitTagsDenied, 'value', 0)
else
    set(handles.uiRadioPitTagsAccepted, 'value', 0)
end

guidata(gcbf, handles);

function setDeniedTag(obj, ~)

handles = guidata(gcbf);

str{1} = get(handles.uiAvailablePitTags, 'string');
str{1} = cellstr(str{1});
% idx(1) = get(handles.uiAvailablePitTags, 'value');
idx1 = get(handles.uiAvailablePitTags, 'value');

if get(handles.uiRadioPitTagsDenied, 'value')==1
    currentList = handles.uiPitTagsDenied;
    flag = 0;
else
    currentList = handles.uiPitTagsAccepted;
    flag = 1;
end

str{2} = get(currentList, 'string');

str{2} = cellstr(str{2});

butstr = get(obj, 'string');

set(findobj('tag', 'uiPitTagsButton8'), 'backgroundcolor', 'default')

switch butstr
    
    case '>'
        
        %         str{2} = [str{2} ; str{1}(idx(1))];
        str{2} = [str{2} ; str{1}(idx1)];
        if isempty(str{2}{1})
            str{2}(1) = [];
        end
        
        str{2} = unique(str{2});
        
    case '<'
        
        %         idx(2) = get(currentList, 'value');
        idx2 = get(currentList, 'value');
        
        %         str{1} = [str{1} ; str{2}(idx(2))];
        %         str{2}(idx(2)) = [];
        str{1} = [str{1} ; str{2}(idx2)];
        str{2}(idx2) = [];
        
        str{1} = unique(str{1});
        str{2} = unique(str{2});
        
    case 'X'
        
        str{1} = [str{1};str{2}];
        str{1} = unique(str{1});
        str{2} = [];
        
        if flag==0
            handles.config = rmfield(handles.config, 'pittagsdenied');
        else
            handles.config = rmfield(handles.config, 'pittagsaccepted');
        end
        
    otherwise
        
        n = str2double(butstr(1));
        N = str2double(butstr(3));
        
        nPitTags = round(numel(str{1})/N);
        
        if n<N
            str{2} = str{1}((n-1)*nPitTags+1:nPitTags*n);
        else
            str{2} = str{1}((n-1)*nPitTags+1:end);
        end
        
        set(obj, 'backgroundcolor', 'g')
        
end

if isempty(str{1}{1})
    str{1}(1) = [];
end

set(handles.uiAvailablePitTags, 'string', str{1});
set(currentList, 'string', str{2});

str{2} = get(currentList, 'string');
if numel(str{2})==0
    set(handles.uiPitTagsButtonToLeft, 'enable', 'off')
    set(currentList, 'value', 0)
else
    set(currentList, 'value', 1)
    set(handles.uiPitTagsButtonToLeft, 'enable', 'on')
end

guidata(gcbf, handles);

function setNumOF(obj, ~)

numOF = get(obj, 'value')-1;

h = findobj('tag', 'uiPitTagsButton8');
set(h, 'visible', 'off', 'backgroundcolor', 'default')
if numOF>0
    for n = numel(h)-numOF+1:numel(h)
        set(h(n), 'visible', 'on', 'string', sprintf('%d/%d', -n+numel(h)+1, numOF))
    end
end

function previewIniFile(~, ~)

getDataFromUi;

handles = guidata(gcbf);

pathname = tempdir;
filename = 'OF_temp.ini';

OF_writeIni(handles.config, pathname, filename)

fid = fopen(fullfile(pathname, filename), 'r');
X = textscan(fid, '%s', 'delimiter', '\n');
fclose(fid);

X{1} = strrep(X{1}, '[', '<html><font color="#8000FF"><b>[');
X{1} = strrep(X{1}, ']', ']</b></font></html>');
X{1} = strrep(X{1}, '=', ' = ');

set(handles.uiPreview, 'string', X{1}, 'value', 1)

delete(fullfile(pathname, filename));

function loadIniFile(~, ~)

[filename, pathname] = uigetfile('*.ini');
if ~filename
    return
end

handles = guidata(gcbf);
handles.config = OF_readIni(fullfile(pathname, filename));
guidata(gcbf, handles);

populateUi
setScenario(findobj('tag', 'uiScenario'))
previewIniFile

set(handles.uiExportButton, 'enable', 'on')

function exportIniFile(~, ~)

[filename, pathname] = uiputfile('*.ini', 'Openfeeder configuration file', 'CONFIG.INI');
if ~filename
    return
end

filename = upper(filename);

getDataFromUi

handles = guidata(gcbf);

OF_writeIni(handles.config, pathname, filename)

exportPITtag(pathname);

function exportPITtag(pathname)

handles = guidata(gcbf);

pittagdeniedfile = fullfile(pathname, 'PTDENIED.TXT');
pittagacceptedfile = fullfile(pathname, 'PTACCEPT.TXT');

if exist(pittagdeniedfile, 'file') == 2
    delete(pittagdeniedfile)
end
if exist(pittagacceptedfile, 'file') == 2
    delete(pittagacceptedfile)
end

if handles.config.pittagsdenied.num>0
    str = get(handles.uiPitTagsDenied, 'string');
    fid = fopen(pittagdeniedfile, 'wt');
    fprintf(fid, '%s', str{:});
    fclose(fid);
end

if handles.config.pittagsaccepted.num>0
    str = get(handles.uiPitTagsAccepted, 'string');
    fid = fopen(pittagacceptedfile, 'wt');
    fprintf(fid, '%s', str{:});
    fclose(fid);
end


function getDataFromUi

handles = guidata(gcbf);

if isfield(handles, 'config')
    handles = rmfield(handles, 'config');
end

%% Scenario
str = cellstr(get(handles.uiScenario, 'string'));
val = get(handles.uiScenario, 'value');
handles.config.scenario.num = uint32(val)-1;
handles.config.scenario.title = char(sscanf(str{val}, '%*d - %s', [1,inf]));

%% Site ID
str = get(handles.uiSiteName, 'string');
val = get(handles.uiSiteName, 'value');
handles.config.siteid.zone = str{val};
str = get(handles.uiSiteNum, 'string');
val = get(handles.uiSiteNum, 'value');
handles.config.siteid.zone = [handles.config.siteid.zone str{val}];

%% WakeUp
str = get(handles.uiWakeUpTimeHour, 'string');
val = get(handles.uiWakeUpTimeHour, 'value');
handles.config.time.wakeup_hour = int32(str2double(str{val}));
str = get(handles.uiWakeUpTimeMinute, 'string');
val = get(handles.uiWakeUpTimeMinute, 'value');
handles.config.time.wakeup_minute = int32(str2double(str{val}));

%% Sleep
str = get(handles.uiSleepTimeHour, 'string');
val = get(handles.uiSleepTimeHour, 'value');
handles.config.time.sleep_hour = int32(str2double(str{val}));
str = get(handles.uiSleepTimeMinute, 'string');
val = get(handles.uiSleepTimeMinute, 'value');
handles.config.time.sleep_minute = int32(str2double(str{val}));

%% Log file separator
str = cellstr(get(handles.uiLogFileSeparator, 'string'));
val = get(handles.uiLogFileSeparator, 'value');
handles.config.logfile.separator = str{val};

%% Attractive LEDs
if handles.config.scenario.num==4
    
    col = 255*get(handles.uiAttractLedsFrameA,'backgroundcolor');
    handles.config.attractiveleds.red_a = int32(col(1));
    handles.config.attractiveleds.green_a = int32(col(2));
    handles.config.attractiveleds.blue_a = int32(col(3));
    col = 255*get(handles.uiAttractLedsFrameB,'backgroundcolor');
    handles.config.attractiveleds.red_b = int32(col(1));
    handles.config.attractiveleds.green_b = int32(col(2));
    handles.config.attractiveleds.blue_b = int32(col(3));
    
    str = get(handles.uiAttractLedsAltDelay, 'string');
    val = get(handles.uiAttractLedsAltDelay, 'value');
    handles.config.attractiveleds.alt_delay = int32(str2double(str{val}));
    
    str = get(handles.uiAttractLedsOnHour, 'string');
    val = get(handles.uiAttractLedsOnHour, 'value');
    handles.config.attractiveleds.on_hour = int32(str2double(str{val}));
    str = get(handles.uiAttractLedsOnMinute, 'string');
    val = get(handles.uiAttractLedsOnMinute, 'value');
    handles.config.attractiveleds.on_minute = int32(str2double(str{val}));
    
    if handles.config.attractiveleds.on_hour<handles.config.time.wakeup_hour || (handles.config.attractiveleds.on_hour==0 && handles.config.time.wakeup_hour~=0)
        handles.config.attractiveleds.on_hour = handles.config.time.wakeup_hour;
        handles.config.attractiveleds.on_minute = handles.config.time.wakeup_minute;
    elseif handles.config.attractiveleds.on_hour==handles.config.time.wakeup_hour && handles.config.attractiveleds.on_minute<handles.config.time.wakeup_minute
        handles.config.attractiveleds.on_minute = handles.config.time.wakeup_minute;
    end
    
    str = get(handles.uiAttractLedsOffHour, 'string');
    val = get(handles.uiAttractLedsOffHour, 'value');
    handles.config.attractiveleds.off_hour = int32(str2double(str{val}));
    str = get(handles.uiAttractLedsOffMinute, 'string');
    val = get(handles.uiAttractLedsOffMinute, 'value');
    handles.config.attractiveleds.off_minute = int32(str2double(str{val}));
    
    if handles.config.attractiveleds.off_hour>handles.config.time.sleep_hour || (handles.config.attractiveleds.off_hour==0 && handles.config.time.sleep_hour~=0)
        handles.config.attractiveleds.off_hour = handles.config.time.sleep_hour;
        handles.config.attractiveleds.off_minute = handles.config.time.sleep_minute;
    elseif handles.config.attractiveleds.off_hour==handles.config.time.sleep_hour && handles.config.attractiveleds.off_minute>handles.config.time.sleep_minute
        handles.config.attractiveleds.off_minute = handles.config.time.sleep_minute;
    end
    
end

%% Pit tags
str = get(handles.uiPitTagsAccepted, 'string');
handles.config.pittagsaccepted.num = uint32(numel(str));
str = get(handles.uiPitTagsDenied, 'string');
handles.config.pittagsdenied.num = uint32(numel(str));

%% Door
str = get(handles.uiDoorOpenHour, 'string');
val = get(handles.uiDoorOpenHour, 'value');
handles.config.door.open_hour = int32(str2double(str{val}));
str = get(handles.uiDoorOpenMinute, 'string');
val = get(handles.uiDoorOpenMinute, 'value');
handles.config.door.open_minute = int32(str2double(str{val}));

if handles.config.door.open_hour<handles.config.time.wakeup_hour
    handles.config.door.open_hour = handles.config.time.wakeup_hour;
    handles.config.door.open_minute = handles.config.time.wakeup_minute;
elseif handles.config.door.open_hour==handles.config.time.wakeup_hour && handles.config.door.open_minute<handles.config.time.wakeup_minute
    handles.config.door.open_minute = handles.config.time.wakeup_minute;
end

str = get(handles.uiDoorCloseHour, 'string');
val = get(handles.uiDoorCloseHour, 'value');
handles.config.door.close_hour = int32(str2double(str{val}));
str = get(handles.uiDoorCloseMinute, 'string');
val = get(handles.uiDoorCloseMinute, 'value');
handles.config.door.close_minute = int32(str2double(str{val}));

if handles.config.door.close_hour>handles.config.time.sleep_hour || (handles.config.door.close_hour==0 && handles.config.time.sleep_hour~=0)
    handles.config.door.close_hour = handles.config.time.sleep_hour;
    handles.config.door.close_minute = handles.config.time.sleep_minute;
elseif handles.config.door.close_hour==handles.config.time.sleep_hour && handles.config.door.close_minute>handles.config.time.sleep_minute
    handles.config.door.close_minute = handles.config.time.sleep_minute;
end

val = get(handles.uiDoorremain_open, 'value');
handles.config.door.remain_open = val==1;

str = get(handles.uiDoorDelaysOpen, 'string');
val = get(handles.uiDoorDelaysOpen, 'value');
handles.config.door.open_delay = int32(str2double(str{val}));
str = get(handles.uiDoorDelaysClose, 'string');
val = get(handles.uiDoorDelaysClose, 'value');
handles.config.door.close_delay = int32(str2double(str{val}));

str = get(handles.uireward_probability, 'string');
val = get(handles.uireward_probability, 'value');
handles.config.door.reward_probability = str2double(str{val});

%% Servomotor

v = int32(str2double(get(handles.uiServoMinPos, 'string')));
if v<600
    v = 600;
end
handles.config.door.ton_min = v;

v = int32(str2double(get(handles.uiServoMaxPos, 'string')));
if v>2400
    v = 2400;
end
handles.config.door.ton_max = v;
handles.config.door.speed = int32(str2double(get(handles.uiServoSpeedInc, 'string')));

%% Timeouts
str = get(handles.uiSleepTimeout, 'string');
val = get(handles.uiSleepTimeout, 'value');
handles.config.timeouts.sleep = int32(str2double(str{val}));
str = get(handles.uiPIRTimeout, 'string');
val = get(handles.uiPIRTimeout, 'value');
handles.config.timeouts.pir = int32(str2double(str{val}));
str = get(handles.uiRewardTimeout, 'string');
val = get(handles.uiRewardTimeout, 'value');
handles.config.timeouts.reward = int32(str2double(str{val}));

% Door habituation
if handles.config.scenario.num==5
    str = get(handles.uiDoorHabitPercent, 'string');
    val = get(handles.uiDoorHabitPercent, 'value');
    handles.config.door.habituation = int32(str2double(str{val}));
end

% Punishment
str = get(handles.uiPunishmentDelay, 'string');
val = get(handles.uiPunishmentDelay, 'value');
handles.config.punishment.delay = int32(str2double(str{val}));

guidata(gcbf, handles);

function populateUi

handles = guidata(gcbf);

%% Scenario
set(handles.uiScenario, 'value', handles.config.scenario.num+1);

%% Site ID
str = get(handles.uiSiteName, 'string');
idx = find(strcmp(str, handles.config.siteid.zone(1:2)));
set(handles.uiSiteName, 'value', idx)

str = get(handles.uiSiteNum, 'string');
idx = find(strcmp(str, handles.config.siteid.zone(3:4)));
set(handles.uiSiteNum, 'value', idx)

%% Wakeup
str = get(handles.uiWakeUpTimeHour, 'string');
idx = find(strcmp(str, num2str(handles.config.time.wakeup_hour, '%02d')));
set(handles.uiWakeUpTimeHour, 'value', idx)
str = get(handles.uiWakeUpTimeMinute, 'string');
idx = find(strcmp(str, num2str(handles.config.time.wakeup_minute, '%02d')));
set(handles.uiWakeUpTimeMinute, 'value', idx)

%% Sleep
str = get(handles.uiSleepTimeHour, 'string');
idx = find(strcmp(str, num2str(handles.config.time.sleep_hour, '%02d')));
set(handles.uiSleepTimeHour, 'value', idx)
str = get(handles.uiSleepTimeMinute, 'string');
idx = find(strcmp(str, num2str(handles.config.time.sleep_minute, '%02d')));
set(handles.uiSleepTimeMinute, 'value', idx)

if handles.config.scenario.num==4
    %% Attractive LEDs
    rgb = [handles.config.attractiveleds.red_a handles.config.attractiveleds.green_a handles.config.attractiveleds.blue_a];
    set(handles.uiAttractLedsValueA, 'string', sprintf('[%d %d %d]', rgb));
    if ~any(rgb==-1)
        set(handles.uiAttractLedsFrameA, 'backgroundcolor', double(rgb)/255)
    end
    rgb = [handles.config.attractiveleds.red_b handles.config.attractiveleds.green_b handles.config.attractiveleds.blue_b];
    set(handles.uiAttractLedsValueB, 'string', sprintf('[%d %d %d]', rgb));
    if ~any(rgb==-1)
        set(handles.uiAttractLedsFrameB, 'backgroundcolor', double(rgb)/255)
    end

    str = get(handles.uiAttractLedsAltDelay, 'string');
    idx = find(strcmp(str, num2str(handles.config.attractiveleds.alt_delay)));
    set(handles.uiAttractLedsAltDelay, 'value', idx)

    str = get(handles.uiAttractLedsOnHour, 'string');
    idx = find(strcmp(str, num2str(handles.config.attractiveleds.on_hour, '%02d')));
    set(handles.uiAttractLedsOnHour, 'value', idx)
    str = get(handles.uiAttractLedsOnMinute, 'string');
    idx = find(strcmp(str, num2str(handles.config.attractiveleds.on_minute, '%02d')));
    set(handles.uiAttractLedsOnMinute, 'value', idx)

    str = get(handles.uiAttractLedsOffHour, 'string');
    idx = find(strcmp(str, num2str(handles.config.attractiveleds.off_hour, '%02d')));
    set(handles.uiAttractLedsOffHour, 'value', idx)
    str = get(handles.uiAttractLedsOffMinute, 'string');
    idx = find(strcmp(str, num2str(handles.config.attractiveleds.off_minute, '%02d')));
    set(handles.uiAttractLedsOffMinute, 'value', idx)
end

%% Servomotor
set(handles.uiServoMinPos, 'string', num2str(handles.config.door.ton_min));
set(handles.uiServoMaxPos, 'string', num2str(handles.config.door.ton_max));
set(handles.uiServoSpeedInc, 'string', num2str(handles.config.door.speed));

%% Door delays

str = get(handles.uiDoorOpenHour, 'string');
idx = find(strcmp(str, num2str(handles.config.door.open_hour, '%02d')));
set(handles.uiDoorOpenHour, 'value', idx)
str = get(handles.uiDoorOpenMinute, 'string');
idx = find(strcmp(str, num2str(handles.config.door.open_minute, '%02d')));
set(handles.uiDoorOpenMinute, 'value', idx)

str = get(handles.uiDoorCloseHour, 'string');
idx = find(strcmp(str, num2str(handles.config.door.close_hour, '%02d')));
set(handles.uiDoorCloseHour, 'value', idx)
str = get(handles.uiDoorCloseMinute, 'string');
idx = find(strcmp(str, num2str(handles.config.door.close_minute, '%02d')));
set(handles.uiDoorCloseMinute, 'value', idx)

set(handles.uiDoorremain_open, 'value', handles.config.door.remain_open);

str = get(handles.uiDoorDelaysOpen, 'string');
idx = find(strcmp(str, num2str(handles.config.door.open_delay)));
set(handles.uiDoorDelaysOpen, 'value', idx)
str = get(handles.uiDoorDelaysClose, 'string');
idx = find(strcmp(str, num2str(handles.config.door.close_delay)));
set(handles.uiDoorDelaysClose, 'value', idx)

%% Pit tag
if isfield(handles.config, 'pittagsdenied')
    fn = fieldnames(handles.config.pittagsdenied);
    if numel(fn)>0
        str = {};
        val = 0;
        for n = 1:numel(fn)
            val = 1;
            str{n} = handles.config.pittagsdenied.(['sn' num2str(n)]);
        end
        set(handles.uiPitTagsDenied, 'string', str, 'value', val);
        
        set(handles.uiPitTagsButtonToLeft, 'enable', 'on');
    else
        set(handles.uiPitTagsDenied, 'value', 1);
    end
end
if isfield(handles.config, 'pittagsaccepted')
    fn = fieldnames(handles.config.pittagsaccepted);
    if numel(fn)>0
        str = {};
        val = 0;
        for n = 1:numel(fn)
            val = 1;
            str{n} = handles.config.pittagsaccepted.(['sn' num2str(n)]);
        end
        set(handles.uiPitTagsAccepted, 'string', str, 'value', val);
        
        set(handles.uiPitTagsButtonToLeft, 'enable', 'on');
    else
        set(handles.uiPitTagsAccepted, 'value', 1);
    end
end

%% Timeouts
str = get(handles.uiSleepTimeout, 'string');
idx = find(strcmp(str, num2str(handles.config.timeouts.sleep)));
set(handles.uiSleepTimeout, 'value', idx)
str = get(handles.uiPIRTimeout, 'string');
idx = find(strcmp(str, num2str(handles.config.timeouts.pir)));
set(handles.uiPIRTimeout, 'value', idx)
str = get(handles.uiRewardTimeout, 'string');
idx = find(strcmp(str, num2str(handles.config.timeouts.reward)));
set(handles.uiRewardTimeout, 'value', idx)

% Door habituation
if isfield(handles.config.door, 'habituation')
    str = get(handles.uiDoorHabitPercent, 'string');
    idx = find(strcmp(str, num2str(handles.config.door.habituation)));
    set(handles.uiDoorHabitPercent, 'value', idx)
end

% Punishment
str = get(handles.uiPunishmentDelay, 'string');
idx = find(strcmp(str, num2str(handles.config.punishment.delay)));
set(handles.uiPunishmentDelay, 'value', idx)

%% Log file
set(handles.uiLogFileSeparator, 'string', handles.config.logfile.separator);

function setAttractLEDsColor(obj, ~)

handles = guidata(gcbf);

str = get(obj, 'string');

rgb = get(handles.(['uiAttractLedsFrame' str(end)]), 'backgroundcolor');

rgb = uisetcolor(rgb);

set(handles.(['uiAttractLedsFrame' str(end)]), 'backgroundcolor', rgb);
rgb = round(rgb*255);

set(handles.(['uiAttractLedsValue' str(end)]), 'string', sprintf('[%d %d %d]', rgb));

function setAttractLEDsOff

handles = guidata(gcbf);

set([handles.uiAttractLedsFrameA handles.uiAttractLedsFrameB], 'backgroundcolor', [0 0 0]);
set([handles.uiAttractLedsValueA handles.uiAttractLedsValueB], 'string', '[0 0 0]');

function config = OF_readIni(filename)

if exist(filename, 'file')~=2
    error('INI file not found');
end

sections = ini_getallsections(filename);

config.scenario.num = ini_getl('scenario', 'num', -1, filename);
config.siteid.zone = ini_gets('siteid', 'zone', 'XXXXXXXXXX', filename);

config.time.wakeup_hour = ini_getl('time', 'wakeup_hour', -1, filename);
config.time.wakeup_minute = ini_getl('time', 'wakeup_minute', -1, filename);

config.time.sleep_hour = ini_getl('time', 'sleep_hour', -1, filename);
config.time.sleep_minute = ini_getl('time', 'sleep_minute', -1, filename);

config.logfile.separator = ini_gets('logfile', 'separator', '', filename);

if ismember('attractiveleds', sections)
    config.attractiveleds.red_a = ini_getl('attractiveleds', 'red_a', -1, filename);
    config.attractiveleds.green_a = ini_getl('attractiveleds', 'green_a', -1, filename);
    config.attractiveleds.blue_a = ini_getl('attractiveleds', 'blue_a', -1, filename);

    config.attractiveleds.red_b = ini_getl('attractiveleds', 'red_b', -1, filename);
    config.attractiveleds.green_b = ini_getl('attractiveleds', 'green_b', -1, filename);
    config.attractiveleds.blue_b = ini_getl('attractiveleds', 'blue_b', -1, filename);

    config.attractiveleds.alt_delay = ini_getl('attractiveleds', 'alt_delay', -1, filename);

    config.attractiveleds.on_hour = ini_getl('attractiveleds', 'on_hour', -1, filename);
    config.attractiveleds.on_minute = ini_getl('attractiveleds', 'on_minute', -1, filename);

    config.attractiveleds.off_hour = ini_getl('attractiveleds', 'off_hour', -1, filename);
    config.attractiveleds.off_minute = ini_getl('attractiveleds', 'off_minute', -1, filename);
end

if ismember('pittagsdenied', sections)
    n = 0;
    while 1
        n = n + 1;
        config.pittagsdenied.(['sn' num2str(n)]) = ini_gets('pittagsdenied', ['sn' num2str(n)], 'XXXXXXXXXX', filename);
        if strcmp(config.pittagsdenied.(['sn' num2str(n)]), 'XXXXXXXXXX')
            config.pittagsdenied = rmfield(config.pittagsdenied, ['sn' num2str(n)]);
            break
        end
    end
end

if ismember('pittagsaccepted', sections)
    n = 0;
    while 1
        n = n + 1;
        config.pittagsaccepted.(['sn' num2str(n)]) = ini_gets('pittagsaccepted', ['sn' num2str(n)], 'XXXXXXXXXX', filename);
        if strcmp(config.pittagsaccepted.(['sn' num2str(n)]), 'XXXXXXXXXX')
            config.pittagsaccepted = rmfield(config.pittagsaccepted, ['sn' num2str(n)]);
            break
        end
    end
end

config.door.open_hour = ini_getl('door', 'open_hour', -1, filename);
config.door.open_minute = ini_getl('door', 'open_minute', -1, filename);
config.door.close_hour = ini_getl('door', 'close_hour', -1, filename);
config.door.close_minute = ini_getl('door', 'close_minute', -1, filename);

config.door.remain_open = ini_getbool('door', 'remain_open', false, filename);

config.door.open_delay = ini_getl('door', 'open_delay', -1, filename);
config.door.close_delay = ini_getl('door', 'close_delay', -1, filename);

config.door.ton_min = ini_getl('door', 'ton_min', -1, filename);
config.door.ton_max = ini_getl('door', 'ton_max', -1, filename);
config.door.speed = ini_getl('door', 'speed', -1, filename);

config.timeouts.sleep = ini_getl('timeouts', 'sleep', -1, filename);
config.timeouts.pir = ini_getl('timeouts', 'pir', -1, filename);
config.timeouts.reward = ini_getl('timeouts', 'reward', -1, filename);

if config.scenario.num==5
    config.door.habituation = ini_getl('door', 'habituation', -1, filename);
end

config.punishment.delay = ini_getl('punishment', 'delay', -1, filename);

function OF_writeIni(config, pathname, filename)

if exist(fullfile(pathname, filename), 'file')==2
    delete(fullfile(pathname, filename))
end

fn = fieldnames(config);

for n = 1:numel(fn)
    
    ini.sections{n} = fn{n};
    fn2 = fieldnames(config.(fn{n}));
    
    for m = 1:numel(fn2)
        ini.keys{n}{m} = fn2{m};
        ini.values{n}{m} = config.(fn{n}).(fn2{m});
    end
    
end

ini_structtofile(ini, pathname, filename)