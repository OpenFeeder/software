function OF_serial_gui

% URL: https://github.com/OpenFeeder/softwares/tree/master/serial/matlab/gui01
% Author: Jerome Briot - https://github.com/JeromeBriot

comPort = 'COM17';

% Special characters for communication
stx = hex2dec('02');
etx = hex2dec('03');
enq = hex2dec('05');
ack = hex2dec('06');
dc4 = hex2dec('14');
nack = hex2dec('15');

servoMinPosition = 600;
servoMaxPosition = 2400;

autoscroll = 1;

echoCommands = true;
delay = 0.03;
ser = [];

buffer = [];
files = [];

text_color.state = [0 128 0];
text_color.command = [255 24 230];

fig = figure(1);
clf

figSize = [800 600];

set(fig, ...
    'units', 'pixels', ...
    'position', [0 0 figSize], ...
    'resize', 'off', ...
    'menubar', 'none', ...
    'numbertitle', 'off', ...
    'name', 'OpenFeeder - Serial interface - Not connected', ...
    'visible', 'off', ...
    'CloseRequestFcn', @closeCOMWindow);

movegui(fig, 'center')

set(fig, 'visible', 'on');

button_size = [20 5];
button_size_2 = [15 5];
uiSketchfactor = figSize(1)/140; % 140/105 mm => 800x600 px

frame_color = [.5 .5 .5];
frame_width = 0.3;

%% Button Zone
uiButtonConnect = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [5 98 button_size_2]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'Connect', ...
    'tag', 'uiButtonConnect', ...
    'callback', @connectCOM);
uiButtonDisconnect = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [20 98 button_size_2]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'Disconnect', ...
    'tag', 'uiButtonDisconnect', ...
    'enable', 'off', ...
    'callback', @disconnectCOM);
uiButtonEmptyBuffer = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [35 98 button_size_2]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'Empty buffer', ...
    'tag', 'uiButtonEmptyBuffer', ...
    'enable', 'off', ...
    'callback', @empty_uart_buffer);

uiButtonListCommand = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [52 98 5 5]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', '?', ...
    'tag', 'uiButtonListCommand', ...
    'enable', 'off', ...
    'callback', {@sendCommand, '?'});

uicontrol('style', 'frame', ...
    'units', 'pixels', ...
    'position', [5 96 45 frame_width]*uiSketchfactor, ...
    'backgroundcolor', frame_color);

% uiButtonSetCurrentDate = uicontrol(fig, ...
%     'units', 'pixels', ...
%     'position', [5 90 button_size]*uiSketchfactor, ...
%     'fontweight', 'bold', ...
%     'string', 'Set current date', ...
%     'tag', 'uiButtonSetCurrentDate', ...
%     'enable', 'off', ...
%     'callback', @setCurrentDate);

uiSynchroTime = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [5 90 button_size]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'Synchro PC <=> OF', ...
    'tag', 'uiSynchroDoor', ...
    'enable', 'off', ...
    'callback', @synchroTime);
uiButtonGetCurrentDate = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [30 90 button_size]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'Get current date', ...
    'tag', 'uiButtonGetCurrentDate', ...
    'enable', 'off', ...
    'callback', {@sendCommand, 't'});
%     'callback', {@getCurrentDate);
uiButtonSetDate = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [5 82 button_size]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'Set date', ...
    'tag', 'uiButtonSetDate', ...
    'enable', 'off', ...
    'callback', @setDate);
uiPopDay = uicontrol(fig, ...
    'style', 'popupmenu', ...
    'units', 'pixels', ...
    'position', [28 84 8 5]*uiSketchfactor, ...
    'tag', 'TimDay', ...
    'string',  cellstr(num2str((1:31).', '%02d')), ...
    'fontweight', 'bold', ...
    'value', str2double(datestr(now, 'dd')));
uiPopMonth = uicontrol(fig, ...
    'style', 'popupmenu', ...
    'units', 'pixels', ...
    'position', [37 84 8 5]*uiSketchfactor, ...
    'tag', 'TimeMonth', ...
    'string',  cellstr(num2str((1:12).', '%02d')), ...
    'fontweight', 'bold', ...
    'value', str2double(datestr(now, 'mm')));
uiPopYear = uicontrol(fig, ...
    'style', 'popupmenu', ...
    'units', 'pixels', ...
    'position', [46 84 8 5]*uiSketchfactor, ...
    'tag', 'TimeYear', ...
    'string',  cellstr(num2str((1:20).', '%02d')), ...
    'fontweight', 'bold', ...
    'value', str2double(datestr(now, 'yy')));
uiPopHour = uicontrol(fig, ...
    'style', 'popupmenu', ...
    'units', 'pixels', ...
    'position', [28 79.5 8 5]*uiSketchfactor, ...
    'tag', 'TimeHour', ...
    'string',  cellstr(num2str((0:23).', '%02d')), ...
    'fontweight', 'bold', ...
    'value', 1+str2double(datestr(now, 'HH')));
uiPopMinute = uicontrol(fig, ...
    'style', 'popupmenu', ...
    'units', 'pixels', ...
    'position', [37 79.5 8 5]*uiSketchfactor, ...
    'tag', 'TimeMinute', ...
    'string',  cellstr(num2str((0:59).', '%02d')), ...
    'fontweight', 'bold', ...
    'value', 1+str2double(datestr(now, 'MM')));
uiPopSecond = uicontrol(fig, ...
    'style', 'popupmenu', ...
    'units', 'pixels', ...
    'position', [46 79.5 8 5]*uiSketchfactor, ...
    'tag', 'TimeSecond', ...
    'string',  cellstr(num2str((0:59).', '%02d')), ...
    'fontweight', 'bold', ...
    'value', 1+str2double(datestr(now, 'SS')));

uicontrol('style', 'frame', ...
    'units', 'pixels', ...
    'position', [5 79 45 frame_width]*uiSketchfactor, ...
    'backgroundcolor', frame_color);

uiFileIOList = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [5 73 button_size]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'List files', ...
    'tag', 'uiFileIOList', ...
    'enable', 'off', ...
    'callback', {@sendCommand, 'jl'});

uiFileIOImport = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [30 73 button_size]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'Import CSV files', ...
    'tag', 'uiFileIOImport', ...
    'enable', 'off', ...
    'callback', {@fileio, 'imp'});

uiFileIOCsv = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [5 67 button_size_2]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'Display CSV', ...
    'tag', 'uiFileIOCsv', ...
    'enable', 'off', ...
    'callback', {@sendCommand, 'jc'});

uiFileIOIni = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [20 67 button_size_2]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'Display INI', ...
    'tag', 'uiFileIOIni', ...
    'enable', 'off', ...
    'callback', {@sendCommand, 'ji'});

uiFileIOErr = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [35 67 button_size_2]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'Display Errors', ...
    'tag', 'uiFileIOErr', ...
    'enable', 'off', ...
    'callback', {@sendCommand, 'je'});

uicontrol('style', 'frame', ...
    'units', 'pixels', ...
    'position', [5 65.5 45 frame_width]*uiSketchfactor, ...
    'backgroundcolor', frame_color);

uiFirmware = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [5 59.5 button_size_2]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'Firmware', ...
    'tag', 'uiFirmware', ...
    'enable', 'off', ...
    'callback', {@sendCommand, 'f'});

uiHardware = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [20 59.5 button_size_2]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'Hardware', ...
    'tag', 'uiHardware', ...
    'enable', 'off', ...
    'callback', {@sendCommand, 'h'});

uiUDID = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [35 59.5 button_size_2]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'UDID', ...
    'tag', 'uiUDID', ...
    'enable', 'off', ...
    'callback', {@sendCommand, 'u'});

uicontrol('style', 'frame', ...
    'units', 'pixels', ...
    'position', [5 58 45 frame_width]*uiSketchfactor, ...
    'backgroundcolor', frame_color);

uiButtonCloseDoor = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [5 52 button_size_2]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'Close door', ...
    'tag', 'uiButtonCloseDoor', ...
    'enable', 'off', ...
    'callback', {@sendCommand, 'dc'});
uiButtonOpenDoor = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [20 52 button_size_2]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'Open door', ...
    'tag', 'uiButtonOpenDoor', ...
    'enable', 'off', ...
    'callback', {@sendCommand, 'do'});
uiButtonSetDoor = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [35 52 button_size_2]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'Set position', ...
    'tag', 'uiButtonSetDoor', ...
    'enable', 'off', ...
    'callback', @setDoorPosition);

uicontrol('style', 'frame', ...
    'units', 'pixels', ...
    'position', [5 50.5 45 frame_width]*uiSketchfactor, ...
    'backgroundcolor', frame_color);

uiConfigIni = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [5 45 button_size]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'Display Config.', ...
    'tag', 'uiConfigIni', ...
    'enable', 'off', ...
    'callback', {@sendCommand, 'cd'});

uiConfigRe = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [30 45 button_size]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'Reconfigure', ...
    'tag', 'uiConfigRe', ...
    'enable', 'off', ...
    'callback', {@sendCommand, 'cr'});

uicontrol('style', 'frame', ...
    'units', 'pixels', ...
    'position', [5 43.5 45 frame_width]*uiSketchfactor, ...
    'backgroundcolor', frame_color);

uiMeasureBattery = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [5 37.5 button_size]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'Battery level', ...
    'tag', 'uiMeasureBattery', ...
    'enable', 'off', ...
    'callback', {@sendCommand, 'mb'});

uiMeasureVBat = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [30 37.5 button_size]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'Vbat level', ...
    'tag', 'uiMeasureVBat', ...
    'enable', 'off', ...
    'callback', {@sendCommand, 'mv'});

uiMeasureDoor = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [5 31 button_size]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'Door position', ...
    'tag', 'uiMeasureDoor', ...
    'enable', 'off', ...
    'callback', {@sendCommand, 'md'});

uiMeasureRfid = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [30 31 button_size]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'RFID freq.', ...
    'tag', 'uiMeasureRfid', ...
    'enable', 'off', ...
    'callback', {@sendCommand, 'mr'});

uicontrol('style', 'frame', ...
    'units', 'pixels', ...
    'position', [5 29.5 45 frame_width]*uiSketchfactor, ...
    'backgroundcolor', frame_color);

uiI2c = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [5 24 button_size_2]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'I2C scanner', ...
    'tag', 'uiI2c', ...
    'enable', 'off', ...
    'callback', {@sendCommand, 'l'});

uiStatusLeds = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [20 24 button_size_2]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'Status LEDs', ...
    'tag', 'uiStatusLeds', ...
    'enable', 'off', ...
    'callback', {@sendCommand, 'q'});

uiTestRfid = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [35 24 button_size_2]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'Test RFID', ...
    'tag', 'uiTestRfid', ...
    'enable', 'off', ...
    'callback', {@sendCommand, 'z'});

uicontrol('style', 'frame', ...
    'units', 'pixels', ...
    'position', [5 22 45 frame_width]*uiSketchfactor, ...
    'backgroundcolor', frame_color);

uiIRPower = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [5 16 button_size]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'IR power', ...
    'tag', 'uiIRPower', ...
    'enable', 'off', ...
    'callback', {@sendCommand, 'ip'});

uiIRStatus = uicontrol(fig, ...
    'units', 'pixels', ...
    'position', [30 16 button_size]*uiSketchfactor, ...
    'fontweight', 'bold', ...
    'string', 'IR status', ...
    'tag', 'uiIRStatus', ...
    'enable', 'off', ...
    'callback', {@sendCommand, 'is'});

%% Preview zone
uiCommunicationWindow = uicontrol(fig, ...
    'style', 'listbox', ...
    'units', 'pixels', ...
    'position', [60 0 80 105]*uiSketchfactor, ...
    'horizontalalignment', 'left', ...
    'fontweight', 'bold', ...
    'fontname', 'monospaced', ...
    'fontsize', 10, ...
    'tag', 'uiCommunicationWindow', ...
    'min', 0, ...
    'max', 2, ...
    'keypressfcn', @keyPressComWindow);

hcmenu = uicontextmenu;
uimenu(hcmenu, 'Label', 'Clear all', 'Callback', {@clearComWindow 'all'});
uimenu(hcmenu, 'Label', 'Clear selection', 'Callback', {@clearComWindow 'select'});
uimenu(hcmenu, 'Label', 'Copy all', 'Callback', {@copyComWindow 'all'}, 'separator', 'on');
uimenu(hcmenu, 'Label', 'Copy selection', 'Callback', {@copyComWindow 'select'});
autoscrollmenu = uimenu(hcmenu, 'Label', 'Auto scroll', 'Callback', @toggleAutoScroll, 'separator', 'on', ...
    'checked', 'on');
set(uiCommunicationWindow, 'uicontextmenu' ,hcmenu)

    function connectCOM(~, ~)
        
        ser = instrfind('Port', comPort);
        
        if isempty(ser)
            ser = serial(comPort, ...
                'Terminator', {'CR/LF', '' }, ...
                'Timeout', 2, ...
                'BytesAvailableFcnMode', 'terminator', ...
                'BytesAvailableFcn', @readDataFromOF);
            pause(delay)
            fopen(ser);
        else
            if ~strcmp(ser.Status, 'open')
                fopen(ser);
            end
            
            set(ser, 'Terminator', {'CR/LF', '' }, ...
                'Timeout', 2, ...
                'BytesAvailableFcnMode', 'terminator', ...
                'BytesAvailableFcn', @readDataFromOF);
        end
        
        % Purge input buffer
        while(ser.BytesAvailable>0)
            fread(ser, ser.BytesAvailable);
            pause(delay);
        end
        
        set(uiButtonConnect, 'enable', 'off')
        set(uiButtonDisconnect, 'enable', 'on')
        set(uiButtonEmptyBuffer, 'enable', 'on')
        set(uiButtonListCommand, 'enable', 'on')
        
        set(uiButtonGetCurrentDate, 'enable', 'on')
        set(uiButtonSetDate, 'enable', 'on')
        set(uiSynchroTime, 'enable', 'on')
        
        set(uiFileIOList, 'enable', 'on')
        set(uiFileIOCsv, 'enable', 'on')
        set(uiFileIOIni, 'enable', 'on')
        set(uiFileIOErr, 'enable', 'on')
        set(uiFileIOImport, 'enable', 'on')
        
        set(uiFirmware, 'enable', 'on')
        set(uiHardware, 'enable', 'on')
        set(uiUDID, 'enable', 'on')
        
        set(uiButtonOpenDoor, 'enable', 'on')
        set(uiButtonCloseDoor, 'enable', 'on')
        set(uiButtonSetDoor, 'enable', 'on')
        
        set(uiConfigIni, 'enable', 'on')
        set(uiConfigRe, 'enable', 'on')
        
        set(uiMeasureBattery, 'enable', 'on')
        set(uiMeasureVBat, 'enable', 'on')
        set(uiMeasureDoor, 'enable', 'on')
        set(uiMeasureRfid, 'enable', 'on')
        
        set(uiI2c, 'enable', 'on')
        set(uiStatusLeds, 'enable', 'on')
        set(uiTestRfid, 'enable', 'on')
        
        set(uiIRPower, 'enable', 'on')
        set(uiIRStatus, 'enable', 'on')
        
        set(fig, 'name', sprintf('OpenFeeder - Serial interface - Connected to port %s', comPort))
        
    end

    function disconnectCOM(~, ~)
        
        if strcmp(ser.Status, 'open')
            fclose(ser);
        end
        
        delete(ser)
        
        set(uiButtonConnect, 'enable', 'on')
        set(uiButtonDisconnect, 'enable', 'off')
        set(uiButtonEmptyBuffer, 'enable', 'off')
        set(uiButtonListCommand, 'enable', 'off')
        
        set(uiButtonGetCurrentDate, 'enable', 'off')
        set(uiButtonSetDate, 'enable', 'off')
        set(uiSynchroTime, 'enable', 'off')
        
        set(uiFileIOList, 'enable', 'off')
        set(uiFileIOCsv, 'enable', 'off')
        set(uiFileIOIni, 'enable', 'off')
        set(uiFileIOErr, 'enable', 'off')
        set(uiFileIOImport, 'enable', 'off')
        
        set(uiFirmware, 'enable', 'off')
        set(uiHardware, 'enable', 'off')
        set(uiUDID, 'enable', 'off')
        
        set(uiButtonOpenDoor, 'enable', 'off')
        set(uiButtonCloseDoor, 'enable', 'off')
        set(uiButtonSetDoor, 'enable', 'off')
        
        set(uiConfigIni, 'enable', 'off')
        set(uiConfigRe, 'enable', 'off')
        
        set(uiMeasureBattery, 'enable', 'off')
        set(uiMeasureVBat, 'enable', 'off')
        set(uiMeasureDoor, 'enable', 'off')
        set(uiMeasureRfid, 'enable', 'off')
        
        set(uiI2c, 'enable', 'off')
        set(uiStatusLeds, 'enable', 'off')
        set(uiTestRfid, 'enable', 'off')
        
        set(uiIRPower, 'enable', 'off')
        set(uiIRStatus, 'enable', 'off')
        
        set(fig, 'name', 'OpenFeeder - Serial interface - Not connected')
        
    end

    function populateCommunicationWindow(substr)
        
        
        if ~isempty(substr) && substr(1) == '>'
            
            substr = sprintf('<html><font color="#%02X%02X%02X"><b>%s</b></font></html>', ...
                text_color.state(1), ...
                text_color.state(2), ...
                text_color.state(3), ...
                substr);
            
        end
        
        str = get(uiCommunicationWindow, 'string');
        str = cellstr(str);
        n = numel(str);
        str{n+1} = substr;
        
        if autoscroll
            set(uiCommunicationWindow, 'string', str, 'value', numel(str));
        else
            set(uiCommunicationWindow, 'string', str);
        end
        
    end

    function readDataFromOF(~, ~)
        
        tmp = fscanf(ser);
        tmp = strrep(tmp,[13 10], '');
        str = strrep(tmp, 9, [32 32 32]);
        
        populateCommunicationWindow(str)
        
    end

    function clearComWindow(~, ~, flag)
        
        if strcmpi(flag, 'all')
            set(uiCommunicationWindow, 'string', {}, 'value', 0)
        else
            idx = get(uiCommunicationWindow, 'value');
            str = get(uiCommunicationWindow, 'string');
            if isempty(str)
                return
            end
            str(idx) = [];
            
            set(uiCommunicationWindow, 'string', str, 'value', idx(1)-1)
        end
    end

    function copyComWindow(~, ~, flag)
        
        if strcmpi(flag, 'all')
            str = get(uiCommunicationWindow, 'string');
        else
            idx = get(uiCommunicationWindow, 'value');
            str = get(uiCommunicationWindow, 'string');
            str = str(idx);
        end
        
        str = removeTextDecoration(str);
        str = sprintf('%s\n', str{:});
        clipboard('copy', str)
        
    end

    function str = removeTextDecoration(str)
        
        fn = fieldnames(text_color);
        
        for n = 1:numel(fn)
            html = sprintf('<html><font color="#%02X%02X%02X"><b>', text_color.(fn{n})(1), text_color.(fn{n})(2), text_color.(fn{n})(3));
            str = strrep(str, html, '');
        end
        str = strrep(str, '</b></font></html>', '');
        
    end

    function keyPressComWindow(~, event)
        
        if strcmp(event.Key, 'shift') || strcmp(event.Key, 'alt') || strcmp(event.Key, 'control')
            return
        end
        
        sendCommand([], [], event.Character)
        
    end

    function sendCommand(~, ~, arg)
        
        if echoCommands
            
            str = sprintf('<html><font color="#%02X%02X%02X"><b>=> %s</b></font></html>', ...
                text_color.command(1), ...
                text_color.command(2), ...
                text_color.command(3), ...
                arg);
            
            populateCommunicationWindow(str)
            
        end
        
        fwrite(ser, uint8(arg));
        
    end

    function setDate(~, ~)
        
        if echoCommands
            str = sprintf('<html><font color="#FF18E6"><b> => %s</b></font></html>', 'S');
            populateCommunicationWindow(str)
        end
        
        val = get(uiPopYear, 'value');
        str = get(uiPopYear, 'string');
        V(1) = str2double(str{val});
        val = get(uiPopMonth, 'value');
        str = get(uiPopMonth, 'string');
        V(2) = str2double(str{val});
        val = get(uiPopDay, 'value');
        str = get(uiPopDay, 'string');
        V(3) = str2double(str{val});
        val = get(uiPopHour, 'value');
        str = get(uiPopHour, 'string');
        V(4) = str2double(str{val});
        val = get(uiPopMinute, 'value');
        str = get(uiPopMinute, 'string');
        V(5) = str2double(str{val});
        val = get(uiPopSecond, 'value');
        str = get(uiPopSecond, 'string');
        V(6) = str2double(str{val});
        
        fwrite(ser, uint8(['S' V]))
        
    end

    function synchroTime(~, ~)
        
        num = 12;
        maxTime = 5;
        
        for n = 1:2
            
            % Dont synchronize OF date and time during the first iteration to allow offsets computation
            if n > 1
                % Query PC date and time
                tmp = now;
                PC_time = now;
                while (PC_time-tmp)<0.000011574074074 % 1/86400 => 1s
                    PC_time = now;
                end
                fwrite(ser, uint8(['S' datevec(PC_time)-[2000 0 0 0 0 0]]))
                pause(2);
            end
            
            % Query PC date and time
            tmp = now;
            PC_time = now;
            while (PC_time-tmp)<0.000011574074074 % 1/86400 => 1s
                PC_time = now;
            end
            
            T1 = tic;
            % Query OF date and time
            fwrite(ser, uint8('T'))
            
            T2 = tic;
            while(ser.BytesAvailable<num)
                t = toc(T2);
                if t>maxTime
                    if ser.BytesAvailable==0
                        error('No reply from the OF after %ds (iteration %d).\nNo data received', maxTime, n);
                    else
                        c = fread(ser, [1 ser.BytesAvailable], '*char');
                        error('No reply from the OF after %ds (iteration %d).\n%d characters received: %s', maxTime, n, c);
                    end
                end
            end
            
            OF_time = fread(ser, [1 ser.BytesAvailable]);
            
            if ~any(OF_time(7:end))
                ext_rtc_available = false;
            else
                ext_rtc_available = true;
            end
            
            t = toc(T1);
            
            PC_time = PC_time + t*0.000011574074074;
            
            % Print dates and times in the console
            str = sprintf('\nPC : %s', datestr(PC_time, 'dd/mm/yyyy HH:MM:SS'));
            populateCommunicationWindow(str)
            str = sprintf('PIC: %02d/%02d/20%02d %02d:%02d:%02d', OF_time(3), OF_time(2), OF_time(1) , OF_time(4), OF_time(5), OF_time(6));
            populateCommunicationWindow(str)
            if ext_rtc_available
                str = sprintf('EXT: %02d/%02d/20%02d %02d:%02d:%02d', OF_time(9), OF_time(8), OF_time(7), OF_time(10), OF_time(11), OF_time(12));
            else
                str = sprintf('EXT: --/--/---- --:--:--');
            end
            populateCommunicationWindow(str)
            
            % Compute offset between PC and PIC date and time
            PIC_time = datenum(OF_time(1:6)+[2000 0 0 0 0 0]);
            
            if PC_time > PIC_time
                delta = PC_time-PIC_time;
                s = '+';
            else
                delta = PIC_time-PC_time;
                s = '-';
            end
            
            delta = datevec(delta);
            
            if delta(3) < 1
                str = sprintf('\nDiff PC-PIC: %c%02d:%02d:%02d (%e)', s, floor(delta(4:6)) , datenum(delta));                
                %                 if delta(6)>9
                %                     str = sprintf('\nDiff PC-PIC: %c%02d:%02d:%.3f (%e)', s, delta(4:6) , datenum(delta));
                %                 else
                %                     str = sprintf('\nDiff PC-PIC: %c%02d:%02d:0%.3f (%e)', s, delta(4:6) , datenum(delta));
                %                 end                
            else
                str = sprintf('\nDiff PC-PIC: greater than one day (%e)', datenum(delta));
            end
            populateCommunicationWindow(str)
            
            % Compute offset between PC and external module date and time (if available)
            if ext_rtc_available
                
                EXT_time = datenum(OF_time(7:end)+[2000 0 0 0 0 0]);
                
                if PC_time > EXT_time
                    delta = PC_time-EXT_time;
                    s = '+';
                else
                    delta = EXT_time-PC_time;
                    s = '-';
                end
                
                delta = datevec(delta);
                
                if delta(3) < 1
                    str = sprintf('Diff PC-EXT: %c%02d:%02d:%02d (%e)', s, floor(delta(4:6)) , datenum(delta));
                    %                     if delta(6)>9
                    %                         str = sprintf('Diff PC-EXT: %c%02d:%02d:%.3f (%e)', s, delta(4:6) , datenum(delta));
                    %                     else
                    %                         str = sprintf('Diff PC-EXT: %c%02d:%02d:0%.3f (%e)', s, delta(4:6) , datenum(delta));
                    %                     end
                else
                    str = sprintf('Diff PC-EXT: greater than one day (%e)', datenum(delta));
                end
                populateCommunicationWindow(str)
                
            else
                str = sprintf('Diff PC-EXT:  --:--:--.--- (0)');
                populateCommunicationWindow(str)
            end
            
        end
        
    end

    function fileio(~, ~, action)
        
        switch action
            
            case 'imp'
                
                fwrite(ser, uint8('jx'))
                
                set(ser, 'BytesAvailableFcn', @readDataFromOFToBuffer, ...
                    'BytesAvailableFcnMode', 'terminator', ...
                    'Terminator', {dc4, '' });
                
                if echoCommands
                    str = sprintf('<html><font color="#FF18E6"><b> => %s</b></font></html>', 'X');
                    populateCommunicationWindow(str)
                end
                
                set(gcf, 'pointer', 'watch')
                
        end
        
    end

    function readDataFromOFToBuffer(~, ~)
        
        if ser.BytesAvailable==0
            return
        end
        
        tmp = fread(ser, [1, ser.BytesAvailable]);
        
        if isempty(tmp)
            return
        end
        
        if any(tmp==stx)
            idx_stx = strfind(tmp, stx);
            if idx_stx>1
                tmp(1:idx_stx-1) = [];
            end
            buffer = [];
        end
        
        if any(tmp==etx)
            
            idx_etx = strfind(tmp, etx);
            if idx_etx > numel(tmp)
                tmp(idx_etx+1:end) = [];
            end
            
            set(ser,'BytesAvailableFcn', @readDataFromOF, ...
                'BytesAvailableFcnMode', 'terminator', ...
                'Terminator', {'CR/LF', '' });
            
            buffer = [buffer tmp];
            
            parseBuffer();
            
        end
        
        buffer = [buffer tmp];
        
    end

    function parseBuffer()
        
        if buffer(1)==stx
            buffer(1) = [];
        end
        
        if buffer(end)==etx
            buffer(end) = [];
        end
        
        if buffer(1)==ack
            buffer(1) = [];
        elseif buffer(1)==nack
            buffer(1) = [];
            parseError()
        end
        
        buffer(buffer==dc4) = [];
        
        idx = strfind(buffer, enq);
        
        k = 1;
        for n = 1:3:numel(idx)-1
            
            files.name{k} = char(buffer(idx(n)+1:idx(n+1)-1));
            files.size(k) = str2double(char(buffer(idx(n+1)+1:idx(n+2)-1)));
            files.content{k} = buffer(idx(n+2)+1:idx(n+3)-1);
            
            k = k+1;
            
        end
        
        set(gcf, 'pointer', 'arrow')
        
        saveDataToFiles()
        
    end

    function saveDataToFiles()
        
        folder_name = uigetdir();
        
        if ~folder_name
            return
        end
        
        for n = 1:numel(files.name)
            
            fid = fopen(fullfile(folder_name, files.name{n}), 'w');
            fwrite(fid, files.content{n});
            fclose(fid);
            
            populateCommunicationWindow([files.name{n} ' saved.'])
            
        end
        
    end

    function parseError()
        
        populateCommunicationWindow(['Error: ' char(buffer)])
        
    end

    function setDoorPosition(~, ~)
        
        answer = inputdlg({'Set door position'}, 'OF', 1, {'900'});
        
        val = str2double(answer{1});
        
        if val < servoMinPosition || val > servoMaxPosition
            errordlg(sprintf('Servo position must be in the range [%d %d]', servoMinPosition, servoMaxPosition));
            return
        end
        
        val = uint16(round(val));
        
        if echoCommands
            str = sprintf('<html><font color="#FF18E6"><b> => %s</b></font></html>', 'p');
            populateCommunicationWindow(str)
        end
        
        strv = num2str(val, '%04d');
        
        if echoCommands
            for n = 1:numel(strv)
                str = sprintf('<html><font color="#FF18E6"><b> => %s</b></font></html>', strv(n));
                populateCommunicationWindow(str)
            end
        end
        
        fwrite(ser, uint8(['dp' strv]));
        
    end

    function toggleAutoScroll(~, ~)
        
        autoscroll = ~autoscroll;
        if autoscroll
            set(autoscrollmenu, 'checked', 'on');
        else
            set(autoscrollmenu, 'checked', 'off');
        end
        
    end

    function empty_uart_buffer(~, ~)
        
        while(ser.BytesAvailable>0)
            fread(ser, ser.BytesAvailable);
            pause(delay)
        end
        
    end

    function closeCOMWindow(~, ~)
        
        ser = instrfind('Port', comPort);
        
        if ~isempty(ser)
            
            disconnectCOM([],[])
            
        end
        
        closereq;
    end

end